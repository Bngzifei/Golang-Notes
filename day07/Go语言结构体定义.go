// 结构体是一种聚合的数据类型,是有零个或多个任意类型的值聚合成的实体.每个值称为结构体的成员.Go语言的结构体(struct)和其他语言的类(class)有同等的地位,但Go语言放弃了包括继承在内的大量面向对象特性,只保留了组合(composition)这个最基础的特性.


// 组合甚至不能算成是面向对象的特性,因为在C语言这样的面向过程的编程语言中,也有结构体.也有组合.组合只是形成复合类型的基础.


// 使用关键字type可以将各种基本类型定义为自定义类型.基本类型包括整型,字符串,布尔等.结构体是一种符合的基本类型,通过type定义为自定义类型后使结构体更便于使用.

// 结构体的定义格式如下:
type 类型名 struct {
    字段1 字段1类型
    字段2 字段2类型
    ...
}


// 对各个部分的说明
// 类型名:标识自定义结构体的名称,在同一个包内不能重复
// struct{}:表示结构体类型,type 类型名 struct{}可以理解为将struct{}结构体定义为类型名的类型
// 字段1,字段2...:表示结构体字段名.结构体中的字段名必须唯一
// 字段1类型,字段2类型...:表示结构体字段的类型.


// 使用结构体可以表示一个包含X和Y整型分量的点结构，代码如下：
type Point struct {
    X int
    Y int
}


// 同类型的变量也可以写在一行.颜色的红,绿,蓝3个分量可以使用byte类型表示,定义的颜色结构体如下:
type Color struct {
    R,G,B byte
}

// 结构体的定义只是一种内存布局的描述,只有当结构体实例化时,才会真正地分配内存.