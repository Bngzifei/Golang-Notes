// Go语言垃圾回收和SetFinalizer


// Go语言开发者不需要写代码来释放程序中的不再使用的变量和结构占用的内存,在Go语言运行时有一个独立的进程,即垃圾收集器(GC),会处理这些事情,它搜索不再使用的变量然后释放它们的内存.可以通过runtime包访问GC进程.


// 通过调用runtime.GC函数可以显式的触发GC,但这只在某些罕见的场景下才有用,比如当内存资源不足时调用runtime.GC(),它会将在此函数执行的点上立即释放一大片内存,此时程序可能会有短时的性能下降(因为GC进程在执行).


// 如果想知道当前的内存状态,可以使用:
fmt.Printf("%d\n",runtime.MemStats.Alloc/1024)

// 上面的程序会给出已分配内存的总量,单位是Kb

// 如果需要在一个对象obj被从内存移除前执行一些特殊操作,比如写到日志文件中,可以通过如下方式调用函数来实现:
runtime.SetFinalizer(obj,func(obj *typeObj))

// func(obj *typeObj)需要一个typeObj类型的指针参数obj,特殊操作会在它上面执行.func也可以是一个匿名函数


// 在对象被GC进程选中并从内存中移除以前,SetFinalizer都不会执行,即使程序正常结束或者发生错误.