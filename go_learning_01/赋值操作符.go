package main

import "fmt"

/*
变量初始化时,可以省略变量的类型,由系统自动推断.
声明语句再加上var关键字就显得多余了,
因此我们可以将它们简写为:
     a := 50
     b := false

这是使用变量的首选形式,但是它只能被用在函数体内,
而不可以用于全局变量的声明与赋值.使用操作符 :=
可以高效地创建一个新的变量,称之为初始化声明

如果在相同的代码块中,不可以再次对相同名称的变量使用初始化声明,
例如, a := 20是不被允许的,编译器会提示错误
no new variables on left side of := ,但是 a = 20 是可以的,因为这是
给相同的变量赋予一个新的值.

这意思就是声明变量 和赋值操作 不是一回事, 是先有 再换 的意思
如果你在定义变量a之前使用它,则会得到编译错误 undefined:a
如果你声明了一个局部变量却没有在相同的代码块中使用它,同样会得到编译错误,
a declared and not used

此外,单纯地给a赋值也是不够的,这个值必须被使用
但是全局变量是允许声明但不使用的.同一个类型的多个变量可以在同一行

并行赋值/同时赋值

如果想交换两个变量的值,可以简单地使用a,b = b,a ,但是这两个变量的类型必须是相同的
否则编译错误: cannot use c (type string) as type int in assignment
空白标识符 _ 也被用于 抛弃值, _ 实际上是一个只写变量,你不能得到它的值.
这样做时因为go语言中你必须使用所有被声明的变量,但有时你并不需要使用从
一个函数得到的所有返回值

*/

func main() {
	var a, b int
	var c string
	a, b, c = 5, 7, "abc"
	a,c = c,a
	fmt.Print(a,b,c)
}
